/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExperimentGUI.java
 *
 * Created on May 12, 2010, 4:51:11 AM
 */
package gui;

import java.util.ArrayList;
import javax.swing.JSpinner;
import probabilityDensityFunction.ProbabilityDensityFunction;
import simulation.TPSimulation;

import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author johndoty
 */
public class ExperimentGUI extends javax.swing.JFrame {

    /** Creates new form ExperimentGUI */
    public ExperimentGUI() {
        initComponents();
    }

    private PieDataset createDataset() {
        DefaultPieDataset result = new DefaultPieDataset();
        result.setValue("Linux", 29);
        result.setValue("Mac", 20);
        result.setValue("Windows", 51);
        return result;
    }

    private XYSeriesCollection createXYDataset() {
        XYSeries series = new XYSeries("XYGraph");

        for (int ii = 0; ii < 100; ii++) {
            series.add(ii, ii * 10);
        }

        /*series.add(0, 1);
        series.add(1, 2);
        series.add(2, 1);
        series.add(3, 9);
        series.add(4, 10); */



        //         Add the series to your data set
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }
    ProbabilityDensityFunction myProb = new ProbabilityDensityFunction();
    int[] distTypes = {0, 0, 0};

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectorButtonGroup = new javax.swing.ButtonGroup();
        salesmanButtonGroup = new javax.swing.ButtonGroup();
        mavenButtonGroup = new javax.swing.ButtonGroup();
        jLineChartBeanInfo1 = new org.jfree.beans.JLineChartBeanInfo();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        mainTitle = new java.awt.Label();
        subTitle = new java.awt.Label();
        progressGraph = new org.jfree.beans.JLineChart();
        aboutPanel = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        populationPanel = new javax.swing.JPanel();
        initialCarriersSlider = new javax.swing.JSlider();
        percentInitialCarriersLabel = new javax.swing.JLabel();
        typeInitialCarriersLabel = new javax.swing.JLabel();
        typeInitialList = new javax.swing.JScrollPane();
        typeCarriersList = new javax.swing.JList();
        numAgentsLabel = new javax.swing.JLabel();
        numberAgentsSlider = new javax.swing.JSlider();
        distributionPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        connectorUniformBox = new javax.swing.JCheckBox();
        connectorExponentSpinner = new javax.swing.JSpinner();
        connectorStdDevSpinner = new javax.swing.JSpinner();
        connectorMaxSpinner = new javax.swing.JSpinner();
        connectorNormalBox = new javax.swing.JCheckBox();
        connectorMinSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        connectorPowerBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        connectorMeanSpinner = new javax.swing.JSpinner();
        mavenUniformBox = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        mavenStdDevSpinner = new javax.swing.JSpinner();
        mavenMeanSpinner = new javax.swing.JSpinner();
        mavenPowerBox = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        mavenNormalBox = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        mavenMinSpinner = new javax.swing.JSpinner();
        mavenExponentSpinner = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        mavenMaxSpinner = new javax.swing.JSpinner();
        jLabel23 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        salesmanMaxSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        salesmanMinSpinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        salesmanUniformBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        salesmanPowerBox = new javax.swing.JCheckBox();
        salesmanMeanSpinner = new javax.swing.JSpinner();
        salesmanExponentSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        salesmanStdDevSpinner = new javax.swing.JSpinner();
        salesmanNormalBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        terminationPanel = new javax.swing.JPanel();
        maxCyclesLabel = new javax.swing.JLabel();
        maxSaturationLabel = new javax.swing.JLabel();
        maxCyclesSlider = new javax.swing.JSlider();
        maxSaturationSlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tipping Point ABM");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        mainTitle.setAlignment(java.awt.Label.CENTER);
        mainTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18));
        mainTitle.setText("The Tipping Point");

        subTitle.setAlignment(java.awt.Label.RIGHT);
        subTitle.setText("An Agent Based Model of Information Diffussion and Social Change");

        progressGraph.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressGraph.setDataset(null);
        progressGraph.setSource("");
        progressGraph.setSubtitle("");
        progressGraph.setTitle("Progress of Social Change");
        progressGraph.setXAxisAutoRangeIncludesZero(true);
        progressGraph.setXAxisLabel("Cycles");
        progressGraph.setYAxisLabel("Percent of Change in Population");

        org.jdesktop.layout.GroupLayout progressGraphLayout = new org.jdesktop.layout.GroupLayout(progressGraph);
        progressGraph.setLayout(progressGraphLayout);
        progressGraphLayout.setHorizontalGroup(
            progressGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 660, Short.MAX_VALUE)
        );
        progressGraphLayout.setVerticalGroup(
            progressGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 286, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                            .add(progressGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                            .addContainerGap())
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                            .add(runButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(202, 202, 202))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                            .add(mainTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(254, 254, 254)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                        .add(subTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(118, 118, 118))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(subTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Main", mainPanel);

        jTextPane1.setText("Welcome to the Agent Based Model of Information Diffusion and Social Change\n\nThis Agent Based model is designed to simulate the mechanisms of epedimic social change that \nare discussed in Malcolm Gladwell's \"The Tipping Point.\"\n\n\nInstructions:\n1) Use the Population tab to set the number agents in the population, \nthe percentage of the population that should be initialized with the message,\nand the types of agents to initialize.\n\n2) Use the distribution tab to determine what kind of probability distribution\nshould be used to generate the agent characteristics.  \n*some parameters of connectedness will make it very difficult or impossible for a graph\nto be generated e.g. if an agent has a higher degree than there are agents in the social network.\n\n3)The termination conditions can be used to specify how many cycles \nthrough the population should be conducted before the run is ended, as\nwell as what degree of message saturation can occur before the run is \nended");
        aboutPanel.setViewportView(jTextPane1);

        jTabbedPane2.addTab("About", aboutPanel);

        initialCarriersSlider.setMajorTickSpacing(10);
        initialCarriersSlider.setMinorTickSpacing(10);
        initialCarriersSlider.setPaintLabels(true);
        initialCarriersSlider.setPaintTicks(true);
        initialCarriersSlider.setValue(20);

        percentInitialCarriersLabel.setText("Percent Initial Carriers");

        typeInitialCarriersLabel.setText("Make Up Of Initial Carriers");

        typeCarriersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Random", "Connectors", "All Market Makers" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        typeCarriersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        typeInitialList.setViewportView(typeCarriersList);

        numAgentsLabel.setText("Number Of Agents");

        numberAgentsSlider.setMajorTickSpacing(5000);
        numberAgentsSlider.setMaximum(25000);
        numberAgentsSlider.setMinorTickSpacing(1000);
        numberAgentsSlider.setPaintLabels(true);
        numberAgentsSlider.setPaintTicks(true);
        numberAgentsSlider.setValue(1000);

        org.jdesktop.layout.GroupLayout populationPanelLayout = new org.jdesktop.layout.GroupLayout(populationPanel);
        populationPanel.setLayout(populationPanelLayout);
        populationPanelLayout.setHorizontalGroup(
            populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(populationPanelLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(populationPanelLayout.createSequentialGroup()
                        .add(typeInitialCarriersLabel)
                        .add(18, 18, 18)
                        .add(typeInitialList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(populationPanelLayout.createSequentialGroup()
                        .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(percentInitialCarriersLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(numAgentsLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(numberAgentsSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 511, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(initialCarriersSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 469, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        populationPanelLayout.linkSize(new java.awt.Component[] {initialCarriersSlider, numberAgentsSlider}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        populationPanelLayout.setVerticalGroup(
            populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, populationPanelLayout.createSequentialGroup()
                .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(populationPanelLayout.createSequentialGroup()
                        .add(105, 105, 105)
                        .add(numAgentsLabel)
                        .add(98, 98, 98))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, populationPanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(numberAgentsSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(76, 76, 76)))
                .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(initialCarriersSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(percentInitialCarriersLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(81, 81, 81)
                .add(populationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(typeInitialCarriersLabel)
                    .add(typeInitialList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(69, 69, 69))
        );

        jTabbedPane2.addTab("Population", populationPanel);

        distributionPanel.setForeground(new java.awt.Color(255, 255, 255));

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Uniform", "Normal", "Power" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jLabel4.setText("Mavens");

        jLabel2.setText("Connectors");

        jLabel3.setText("Salesmen");

        jCheckBox4.setText("Uniform");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("Normal");

        jCheckBox6.setText("Power");

        connectorButtonGroup.add(connectorUniformBox);
        connectorUniformBox.setText("Uniform");
        connectorUniformBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectorUniformBoxActionPerformed(evt);
            }
        });

        connectorExponentSpinner.setModel(new javax.swing.SpinnerNumberModel(2.0d, 1.0d, 10.0d, 0.1d));

        connectorStdDevSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(25), null, null, Integer.valueOf(1)));

        connectorMaxSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(150), null, Integer.valueOf(500), Integer.valueOf(1)));

        connectorButtonGroup.add(connectorNormalBox);
        connectorNormalBox.setText("Normal");
        connectorNormalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectorNormalBoxActionPerformed(evt);
            }
        });

        connectorMinSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 3, 35, 1));

        jLabel12.setText("Exponent");

        connectorButtonGroup.add(connectorPowerBox);
        connectorPowerBox.setText("Power");
        connectorPowerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectorPowerBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("Min Value");

        jLabel15.setText("Max Value");

        jLabel16.setText("Mean");

        jLabel17.setText("StdDev");

        connectorMeanSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 5, 200, 1));

        mavenButtonGroup.add(mavenUniformBox);
        mavenUniformBox.setText("Uniform");
        mavenUniformBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenUniformBoxActionPerformed(evt);
            }
        });

        jLabel18.setText("StdDev");

        jLabel19.setText("Max Value");

        mavenStdDevSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(25), null, null, Integer.valueOf(1)));

        mavenMeanSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 0, 50, 1));

        mavenButtonGroup.add(mavenPowerBox);
        mavenPowerBox.setText("Power");
        mavenPowerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenPowerBoxActionPerformed(evt);
            }
        });

        jLabel20.setText("Min Value");

        mavenButtonGroup.add(mavenNormalBox);
        mavenNormalBox.setText("Normal");
        mavenNormalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenNormalBoxActionPerformed(evt);
            }
        });

        jLabel21.setText("Mean");

        mavenMinSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 0, 100, 1));

        mavenExponentSpinner.setModel(new javax.swing.SpinnerNumberModel(2.0d, 1.0d, 10.0d, 0.1d));

        jLabel22.setText("Exponent");

        mavenMaxSpinner.setModel(new javax.swing.SpinnerNumberModel(25, 0, 100, 1));

        jLabel23.setText("Mavens");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setText("Max Value");

        salesmanMaxSpinner.setModel(new javax.swing.SpinnerNumberModel(25, 0, 100, 1));

        jLabel14.setText("Salesmen");

        salesmanMinSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 0, 100, 1));

        jLabel11.setText("Mean");

        salesmanButtonGroup.add(salesmanUniformBox);
        salesmanUniformBox.setText("Uniform");
        salesmanUniformBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesmanUniformBoxActionPerformed(evt);
            }
        });

        jLabel10.setText("Exponent");

        salesmanButtonGroup.add(salesmanPowerBox);
        salesmanPowerBox.setText("Power");
        salesmanPowerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesmanPowerBoxActionPerformed(evt);
            }
        });

        salesmanMeanSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 0, 50, 1));

        salesmanExponentSpinner.setModel(new javax.swing.SpinnerNumberModel(2.0d, 1.0d, 10.0d, 0.1d));

        jLabel9.setText("StdDev");

        salesmanStdDevSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(25), null, null, Integer.valueOf(1)));

        salesmanButtonGroup.add(salesmanNormalBox);
        salesmanNormalBox.setText("Normal");
        salesmanNormalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesmanNormalBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Min Value");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 12, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(salesmanPowerBox)
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(salesmanNormalBox)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(salesmanUniformBox)
                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel5Layout.createSequentialGroup()
                                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jPanel5Layout.createSequentialGroup()
                                                .add(jLabel7)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 51, Short.MAX_VALUE))
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                                                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(jLabel9)
                                                    .add(jLabel11))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                                        .add(jPanel5Layout.createSequentialGroup()
                                            .add(jLabel8)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel5Layout.createSequentialGroup()
                                            .add(18, 18, 18)
                                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(salesmanStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(salesmanMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, salesmanMaxSpinner, 0, 0, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, salesmanMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, Short.MAX_VALUE))))
                                .add(jPanel5Layout.createSequentialGroup()
                                    .add(24, 24, 24)
                                    .add(jLabel10)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(salesmanExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                            .add(jLabel14)
                            .add(53, 53, 53))))
                .add(47, 47, 47)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(31, 31, 31)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel7)
                            .add(salesmanMaxSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(salesmanMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8))
                        .add(18, 18, 18)
                        .add(salesmanUniformBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(salesmanNormalBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel11)
                            .add(salesmanMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(salesmanStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(17, 17, 17)
                        .add(salesmanPowerBox)
                        .add(30, 30, 30)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(salesmanExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 621, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1324, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout distributionPanelLayout = new org.jdesktop.layout.GroupLayout(distributionPanel);
        distributionPanel.setLayout(distributionPanelLayout);
        distributionPanelLayout.setHorizontalGroup(
            distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(distributionPanelLayout.createSequentialGroup()
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(distributionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(distributionPanelLayout.createSequentialGroup()
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel15)
                                    .add(jLabel13))
                                .add(28, 28, 28)
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(connectorMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(connectorMaxSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, Short.MAX_VALUE)))
                            .add(distributionPanelLayout.createSequentialGroup()
                                .add(27, 27, 27)
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel16)
                                    .add(jLabel17))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(connectorStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(connectorMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(distributionPanelLayout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jLabel12)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(connectorExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(distributionPanelLayout.createSequentialGroup()
                        .add(55, 55, 55)
                        .add(jLabel2))
                    .add(distributionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(connectorUniformBox))
                    .add(distributionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(connectorNormalBox))
                    .add(distributionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(connectorPowerBox)))
                .add(44, 44, 44)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(distributionPanelLayout.createSequentialGroup()
                        .add(mavenNormalBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(5, 5, 5))
                    .add(mavenUniformBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mavenExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mavenStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mavenMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(1248, 1248, 1248)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox6)
                    .add(distributionPanelLayout.createSequentialGroup()
                        .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCheckBox4)
                            .add(jCheckBox5))
                        .add(112, 112, 112)
                        .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(distributionPanelLayout.createSequentialGroup()
                                .add(424, 424, 424)
                                .add(jLabel4)
                                .add(18, 18, 18)
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, distributionPanelLayout.createSequentialGroup()
                                .add(jLabel3)
                                .add(119, 119, 119))))))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(536, 536, 536)
                .add(jLabel22)
                .add(2066, 2066, 2066))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(562, 562, 562)
                .add(jLabel21)
                .add(2066, 2066, 2066))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(551, 551, 551)
                .add(jLabel18)
                .add(2066, 2066, 2066))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(565, 565, 565)
                .add(jLabel23)
                .addContainerGap(2050, Short.MAX_VALUE))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(513, 513, 513)
                .add(mavenPowerBox)
                .addContainerGap(2080, Short.MAX_VALUE))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(525, 525, 525)
                .add(jLabel20)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mavenMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2014, Short.MAX_VALUE))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(519, 519, 519)
                .add(jLabel19)
                .add(18, 18, 18)
                .add(mavenMaxSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2013, Short.MAX_VALUE))
        );
        distributionPanelLayout.setVerticalGroup(
            distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(distributionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(connectorMaxSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(connectorMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(connectorUniformBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(connectorNormalBox)
                .add(17, 17, 17)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(connectorMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(connectorStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(connectorPowerBox)
                .add(26, 26, 26)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(connectorExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(953, Short.MAX_VALUE))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(91, 91, 91)
                .add(jLabel3)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(distributionPanelLayout.createSequentialGroup()
                        .add(86, 86, 86)
                        .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(distributionPanelLayout.createSequentialGroup()
                        .add(95, 95, 95)
                        .add(mavenNormalBox)
                        .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(distributionPanelLayout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jCheckBox4)
                                .add(83, 83, 83)
                                .add(jCheckBox5))
                            .add(distributionPanelLayout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel21)
                                    .add(mavenMeanSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(70, 70, 70)
                                .add(mavenPowerBox)
                                .add(18, 18, 18)
                                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel22)
                                    .add(mavenExponentSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 938, Short.MAX_VALUE)
                .add(jCheckBox6))
            .add(distributionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel23)
                .add(32, 32, 32)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(mavenMaxSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mavenMinSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20))
                .add(18, 18, 18)
                .add(mavenUniformBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(92, 92, 92)
                .add(distributionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(mavenStdDevSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1054, Short.MAX_VALUE))
            .add(distributionPanelLayout.createSequentialGroup()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Distribution", distributionPanel);

        maxCyclesLabel.setText("Maximum Cycles");

        maxSaturationLabel.setText("Maximum Saturation");

        maxCyclesSlider.setMajorTickSpacing(5000);
        maxCyclesSlider.setMaximum(20000);
        maxCyclesSlider.setMinorTickSpacing(1000);
        maxCyclesSlider.setPaintLabels(true);
        maxCyclesSlider.setPaintTicks(true);

        maxSaturationSlider.setMajorTickSpacing(20);
        maxSaturationSlider.setMinimum(40);
        maxSaturationSlider.setMinorTickSpacing(10);
        maxSaturationSlider.setPaintLabels(true);
        maxSaturationSlider.setPaintTicks(true);

        org.jdesktop.layout.GroupLayout terminationPanelLayout = new org.jdesktop.layout.GroupLayout(terminationPanel);
        terminationPanel.setLayout(terminationPanelLayout);
        terminationPanelLayout.setHorizontalGroup(
            terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(terminationPanelLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(maxCyclesLabel)
                    .add(maxSaturationLabel))
                .add(18, 18, 18)
                .add(terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, maxSaturationSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, maxCyclesSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
                .addContainerGap(118, Short.MAX_VALUE))
        );

        terminationPanelLayout.linkSize(new java.awt.Component[] {maxCyclesSlider, maxSaturationSlider}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        terminationPanelLayout.setVerticalGroup(
            terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(terminationPanelLayout.createSequentialGroup()
                .add(102, 102, 102)
                .add(terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(maxCyclesLabel)
                    .add(maxCyclesSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(51, 51, 51)
                .add(terminationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(maxSaturationLabel)
                    .add(maxSaturationSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Termination", terminationPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 721, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 482, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        //GET THE STATE FOR ALL PARAMETERS FROM GUI OBJECTS
        //POPULATION
        int numAgents = numberAgentsSlider.getValue();
        int numCarriers = (numAgents * initialCarriersSlider.getValue()) / 100;
        int initialize = typeCarriersList.getSelectedIndex();


        //Agent Distribution Parameters
        //rows: 0 connector; 1 salesman; 2 maven
        //col: 0 Type; 1 mean; 2 stddev; 3 exp; 4 max; 5 min
        int rows = 3;
        int cols = 6;
        double[][] agentDistribution = new double[rows][cols];

        JSpinner spi;
        Integer it;
        Double myDouble;
        //CONNECTOR STATE
        agentDistribution[0][0] = distTypes[0];

        spi = (JSpinner) (connectorMeanSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[0][1] = it.intValue();

        spi = (JSpinner) (connectorStdDevSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[0][2] = it.intValue();

        spi = (JSpinner) (connectorExponentSpinner);
        myDouble = (Double) (spi.getValue());
        agentDistribution[0][3] = myDouble.doubleValue();

        spi = (JSpinner) (connectorMaxSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[0][4] = it.intValue();

        spi = (JSpinner) (connectorMinSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[0][5] = it.intValue();

        //SALESMAN

        agentDistribution[1][0] = distTypes[1];

        spi = (JSpinner) (salesmanMeanSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[1][1] = it.intValue();

        spi = (JSpinner) (salesmanStdDevSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[1][2] = it.intValue();

        spi = (JSpinner) (salesmanExponentSpinner);
        myDouble = (Double) (spi.getValue());
        agentDistribution[1][3] = myDouble.doubleValue();

        spi = (JSpinner) (salesmanMaxSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[1][4] = it.intValue();

        spi = (JSpinner) (salesmanMinSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[1][5] = it.intValue();

        //MAVEN

        agentDistribution[2][0] = distTypes[2];

        spi = (JSpinner) (mavenMeanSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[2][1] = it.intValue();

        spi = (JSpinner) (mavenStdDevSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[2][2] = it.intValue();

        spi = (JSpinner) (mavenExponentSpinner);
        myDouble = (Double) (spi.getValue());
        agentDistribution[2][3] = myDouble.doubleValue();

        spi = (JSpinner) (mavenMaxSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[2][4] = it.intValue();

        spi = (JSpinner) (mavenMinSpinner);
        it = (Integer) (spi.getValue());
        agentDistribution[2][5] = it.intValue();

        //get termination criteria from GUI objects
        int maxCycles = maxCyclesSlider.getValue();
        int maxSaturation = maxSaturationSlider.getValue();

        //generate probability degree sequences for traits

        int[] c_dist = null;
        int[] s_dist = null;
        int[] m_dist = null;

        c_dist = generateConnectorDist(agentDistribution, numAgents);
        s_dist = generateSalesmanDist(agentDistribution, numAgents);
        m_dist = generateMavenDist(agentDistribution, numAgents);

        XYSeries series = new XYSeries("XYGraph");
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        progressGraph.setDataset(dataset);

        //if none selected go with random
        if (initialize == -1) {
            initialize = 0;
        }



        /*
        TPSimulation(int numAgents, int numCarriers, int initialize,
        int[] c_distribution, int[] s_distribution, int[] m_distribution,
        int cycles, int percentCarriers, int numRuns)
         */
        TPSimulation mySim = null;
        int count = 0;
        boolean setup = false;
        while (!setup) {
            System.out.println("ITERATION NUMBER: " + count);

            //set up connector to attempt to generate graph
            c_dist = generateConnectorDist(agentDistribution, numAgents);
            mySim = new TPSimulation(numAgents, numCarriers, initialize, c_dist, s_dist, m_dist,
                    maxCycles, maxSaturation, 1);
            setup = mySim.initializeGraph();
            count++;
        }

        System.out.println("INITIALIZE AGENTS");
        mySim.initializeAgents();
        
        
        ArrayList myData = mySim.quickRun();
        Integer myInt = null;
        int completedCycles = myData.size();
        for(int ii = 0; ii < completedCycles; ii++){
            myInt = (Integer)myData.get(ii);
            series.add(ii, (myInt*100)/numAgents);
        }
        
        /*System.out.println("BEGINNING RUN");
        int status = 0;
        int cycleNumber = 0;
        while (!(status == -1 || status == -2 || status == -3)) {

            status = mySim.cycle();

            //if not a termination criteria then update series
            if (!(status == -1 || status == -2 || status == -3)) {
                series.add(cycleNumber, (status * 100) / numAgents);
            }

            cycleNumber++;
        }*/

        /*
        System.out.println("\nRUN SIMULATION");
        mySim.run();
         */

        System.out.println("TERMINATION OF TEST");
    }//GEN-LAST:event_runButtonActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void connectorUniformBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectorUniformBoxActionPerformed
        distTypes[0] = 0;
    }//GEN-LAST:event_connectorUniformBoxActionPerformed

    private void connectorNormalBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectorNormalBoxActionPerformed
        distTypes[0] = 1;
    }//GEN-LAST:event_connectorNormalBoxActionPerformed

    private void connectorPowerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectorPowerBoxActionPerformed
        distTypes[0] = 2;
    }//GEN-LAST:event_connectorPowerBoxActionPerformed

    //SALESMAN GUI PARAMETERS
    private void salesmanUniformBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesmanUniformBoxActionPerformed
        distTypes[1] = 0;
    }//GEN-LAST:event_salesmanUniformBoxActionPerformed

    private void salesmanNormalBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesmanNormalBoxActionPerformed
        distTypes[1] = 1;
    }//GEN-LAST:event_salesmanNormalBoxActionPerformed

    private void salesmanPowerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesmanPowerBoxActionPerformed
        distTypes[1] = 2;
    }//GEN-LAST:event_salesmanPowerBoxActionPerformed

    //MAVEN GUI PARAMETERS
    private void mavenUniformBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenUniformBoxActionPerformed
        distTypes[2] = 0;
    }//GEN-LAST:event_mavenUniformBoxActionPerformed

    private void mavenNormalBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenNormalBoxActionPerformed
        distTypes[2] = 1;
    }//GEN-LAST:event_mavenNormalBoxActionPerformed

    private void mavenPowerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenPowerBoxActionPerformed
        distTypes[2] = 2;
    }//GEN-LAST:event_mavenPowerBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ExperimentGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane aboutPanel;
    private javax.swing.ButtonGroup connectorButtonGroup;
    private javax.swing.JSpinner connectorExponentSpinner;
    private javax.swing.JSpinner connectorMaxSpinner;
    private javax.swing.JSpinner connectorMeanSpinner;
    private javax.swing.JSpinner connectorMinSpinner;
    private javax.swing.JCheckBox connectorNormalBox;
    private javax.swing.JCheckBox connectorPowerBox;
    private javax.swing.JSpinner connectorStdDevSpinner;
    private javax.swing.JCheckBox connectorUniformBox;
    private javax.swing.JPanel distributionPanel;
    private javax.swing.JSlider initialCarriersSlider;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private org.jfree.beans.JLineChartBeanInfo jLineChartBeanInfo1;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel mainPanel;
    private java.awt.Label mainTitle;
    private javax.swing.ButtonGroup mavenButtonGroup;
    private javax.swing.JSpinner mavenExponentSpinner;
    private javax.swing.JSpinner mavenMaxSpinner;
    private javax.swing.JSpinner mavenMeanSpinner;
    private javax.swing.JSpinner mavenMinSpinner;
    private javax.swing.JCheckBox mavenNormalBox;
    private javax.swing.JCheckBox mavenPowerBox;
    private javax.swing.JSpinner mavenStdDevSpinner;
    private javax.swing.JCheckBox mavenUniformBox;
    private javax.swing.JLabel maxCyclesLabel;
    private javax.swing.JSlider maxCyclesSlider;
    private javax.swing.JLabel maxSaturationLabel;
    private javax.swing.JSlider maxSaturationSlider;
    private javax.swing.JLabel numAgentsLabel;
    private javax.swing.JSlider numberAgentsSlider;
    private javax.swing.JLabel percentInitialCarriersLabel;
    private javax.swing.JPanel populationPanel;
    private org.jfree.beans.JLineChart progressGraph;
    private javax.swing.JButton runButton;
    private javax.swing.ButtonGroup salesmanButtonGroup;
    private javax.swing.JSpinner salesmanExponentSpinner;
    private javax.swing.JSpinner salesmanMaxSpinner;
    private javax.swing.JSpinner salesmanMeanSpinner;
    private javax.swing.JSpinner salesmanMinSpinner;
    private javax.swing.JCheckBox salesmanNormalBox;
    private javax.swing.JCheckBox salesmanPowerBox;
    private javax.swing.JSpinner salesmanStdDevSpinner;
    private javax.swing.JCheckBox salesmanUniformBox;
    private java.awt.Label subTitle;
    private javax.swing.JPanel terminationPanel;
    private javax.swing.JList typeCarriersList;
    private javax.swing.JLabel typeInitialCarriersLabel;
    private javax.swing.JScrollPane typeInitialList;
    // End of variables declaration//GEN-END:variables

    int[] generateConnectorDist(double[][] agentDistribution, int numAgents) {
        double connectorDist = agentDistribution[0][0];
        int[] c_dist = null;
        if (connectorDist == 0) //if uniform
        {
            //numAgents, cmax, cmin
            c_dist = myProb.roundedUniform(numAgents, agentDistribution[0][4], agentDistribution[0][5]);
        } else if (connectorDist == 1) //if normal
        {
            //numAgents, mean, stddev, max, min
            c_dist = myProb.roundedNormal(numAgents, agentDistribution[0][1], agentDistribution[0][2],
                    agentDistribution[0][4], agentDistribution[0][5]);
        } else //if power
        {
            //numAgents, exponent, max, min
            c_dist = myProb.roundedPareto(numAgents, agentDistribution[0][3], agentDistribution[0][4],
                    agentDistribution[0][5]);
        }

        return c_dist;
    }

    int[] generateSalesmanDist(double[][] agentDistribution, int numAgents) {
        double salesmanDist = agentDistribution[1][0];
        int[] s_dist = null;
        if (salesmanDist == 0) //if uniform
        {
            //numAgents, cmax, cmin
            s_dist = myProb.roundedUniform(numAgents, agentDistribution[1][4], agentDistribution[1][5]);
        } else if (salesmanDist == 1) //if normal
        {
            //numAgents, mean, stddev, max, min
            s_dist = myProb.roundedNormal(numAgents, agentDistribution[1][1], agentDistribution[1][2],
                    agentDistribution[1][4], agentDistribution[1][5]);
        } else //if power
        {
            //numAgents, exponent, max, min
            s_dist = myProb.roundedPareto(numAgents, agentDistribution[1][3], agentDistribution[1][4],
                    agentDistribution[1][5]);
        }
        return s_dist;
    }

    int[] generateMavenDist(double[][] agentDistribution, int numAgents) {
        double mavenDist = agentDistribution[2][0];
        int[] m_dist = null;
        if (mavenDist == 0) //if uniform
        {
            //numAgents, cmax, cmin
            m_dist = myProb.roundedUniform(numAgents, agentDistribution[2][4], agentDistribution[2][5]);
        } else if (mavenDist == 1) //if normal
        {
            //numAgents, mean, stddev, max, min
            m_dist = myProb.roundedNormal(numAgents, agentDistribution[2][1], agentDistribution[2][2],
                    agentDistribution[2][4], agentDistribution[2][5]);
        } else //if power
        {
            //numAgents, exponent, max, min
            m_dist = myProb.roundedPareto(numAgents, agentDistribution[2][3], agentDistribution[2][4],
                    agentDistribution[2][5]);
        }
        return m_dist;
    }
}

